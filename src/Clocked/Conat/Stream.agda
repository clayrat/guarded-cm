{-# OPTIONS --guarded #-}
module Clocked.Conat.Stream where

open import Prelude
open import Data.Empty
open import Data.Bool
open import Data.Dec

open import Later
open import Clocked.Conat
open import Clocked.Conat.Arith
open import Clocked.Stream
open import Clocked.Stream.Quantifiers

private variable
  ‚Ñì : Level
  A : ùí∞ ‚Ñì
  k : Cl

-- stream interaction

to-stream·µè-body : ‚ñπ k (‚Ñï‚àû·µè k ‚Üí gStream k Bool) ‚Üí ‚Ñï‚àû·µè k ‚Üí gStream k Bool
to-stream·µè-body ts‚ñπ  coze     = repeat·µè false
to-stream·µè-body ts‚ñπ (cosu n‚ñπ) = cons true (ts‚ñπ ‚äõ n‚ñπ)

-- Escardo's Œπ
to-stream·µè : ‚Ñï‚àû·µè k ‚Üí gStream k Bool
to-stream·µè = fix to-stream·µè-body

infty-stream : to-stream·µè {k = k} infty·µè Ôºù repeat·µè true
infty-stream {k} = fix {k = k} Œª prf‚ñπ ‚Üí
  to-stream·µè infty·µè
    Ôºù‚ü® ap (_$ infty·µè) (fix-path to-stream·µè-body) ‚ü©
  to-stream·µè-body (next to-stream·µè) infty·µè
    Ôºù‚ü® ap (to-stream·µè-body (next to-stream·µè)) (fix-path cosu) ‚ü©
  to-stream·µè-body (next to-stream·µè) (cosu (next infty·µè))
    Ôºù‚ü®‚ü©
  cons true (next (to-stream·µè infty·µè))
    Ôºù‚ü® ap (cons true) (‚ñπ-ext prf‚ñπ) ‚ü©
  cons true (next (repeat·µè true))
    Ôºù‚ü® sym $ fix-path (cons true) ‚ü©
  repeat·µè true
    ‚àé

to-stream·∂ú : ‚Ñï‚àû ‚Üí Stream Bool
to-stream·∂ú c k = to-stream·µè (c k)

-- TODO should be possible to express without streams
_>‚Ñï_ : ‚Ñï‚àû ‚Üí ‚Ñï ‚Üí Bool
c >‚Ñï n = nthÀ¢ n (to-stream·∂ú c)

to-stream·µè-inj : (n m : ‚Ñï‚àû·µè k) ‚Üí to-stream·µè n Ôºù to-stream·µè m ‚Üí n Ôºù m
to-stream·µè-inj = fix Œª prf‚ñπ ‚Üí
  Œª where
      coze       coze     e ‚Üí refl
      coze      (cosu _)  e ‚Üí absurd (false‚â†true (cons-inj e .fst))
      (cosu _)   coze     e ‚Üí absurd (true‚â†false (cons-inj e .fst))
      (cosu n‚ñπ) (cosu m‚ñπ) e ‚Üí
        ap cosu (‚ñπ-ext Œª Œ± ‚Üí prf‚ñπ Œ± (n‚ñπ Œ±) (m‚ñπ Œ±)
                                  ((Œª i ‚Üí pfix to-stream·µè-body (~ i) Œ± (n‚ñπ Œ±))
                                   ‚àô ‚ñπ-ap (cons-inj e .snd) Œ±
                                   ‚àô Œª i ‚Üí pfix to-stream·µè-body i Œ± (m‚ñπ Œ±)))

to-stream·∂ú-inj : (n m : ‚Ñï‚àû) ‚Üí to-stream·∂ú n Ôºù to-stream·∂ú m ‚Üí n Ôºù m
to-stream·∂ú-inj n m e = fun-ext Œª k ‚Üí to-stream·µè-inj (n k) (m k) (happly e k)

-- TODO (g)stream hlevel
--to-stream·µè-emb : is-embedding to-stream·µè
--to-stream·µè-emb = set-injective‚Üíis-embedding {!!} Œª {x} {y} ‚Üí to-stream·µè-inj x y

decreasing·µè : gStream k Bool ‚Üí ùí∞
decreasing·µè {k} = gAdj k (Œª p q ‚Üí p or (not q) Ôºù true)

decreasingÀ¢ : Stream Bool ‚Üí ùí∞
decreasingÀ¢ = Adj (Œª p q ‚Üí p or (not q) Ôºù true)

to-stream·µè-decreasing : (n : ‚Ñï‚àû·µè k) ‚Üí decreasing·µè (to-stream·µè n)
to-stream·µè-decreasing =
  fix Œª ih‚ñπ ‚Üí Œª where
    coze      ‚Üí repeat-gadj or-compl false
    (cosu n‚ñπ) ‚Üí
      gAdj-cons (next refl) Œª Œ± ‚Üí transport (Œª i ‚Üí decreasing·µè (pfix to-stream·µè-body (~ i) Œ± (n‚ñπ Œ±))) ((ih‚ñπ ‚äõ n‚ñπ) Œ±)

to-streamÀ¢-decreasing : (n : ‚Ñï‚àû) ‚Üí decreasingÀ¢ (to-stream·∂ú n)
to-streamÀ¢-decreasing n k = to-stream·µè-decreasing (n k)

-- Cantor encoding (single bit)

to-Cantor·µè-body : ‚ñπ k (‚Ñï‚àû·µè k ‚Üí gStream k Bool) ‚Üí ‚Ñï‚àû·µè k ‚Üí gStream k Bool
to-Cantor·µè-body ts‚ñπ  coze     = cons-Œ¥ true (repeat·µè false)
to-Cantor·µè-body ts‚ñπ (cosu n‚ñπ) = cons false (ts‚ñπ ‚äõ n‚ñπ)

to-Cantor·µè : ‚Ñï‚àû·µè k ‚Üí gStream k Bool
to-Cantor·µè = fix to-Cantor·µè-body

to-Cantor·∂ú : ‚Ñï‚àû ‚Üí Stream Bool
to-Cantor·∂ú n k = to-Cantor·µè (n k)

Cantor·µè-infty : to-Cantor·µè {k = k} infty·µè Ôºù repeat·µè false
Cantor·µè-infty =
  fix Œª ih‚ñπ ‚Üí
    ap (cons false) (‚ñπ-ext Œª Œ± ‚Üí (Œª i ‚Üí dfix to-Cantor·µè-body Œ± (pfix cosu i Œ±))
                               ‚àô (Œª i ‚Üí pfix to-Cantor·µè-body i Œ± infty·µè)
                               ‚àô ih‚ñπ Œ±
                               ‚àô (Œª i ‚Üí pfix (cons false) (~ i) Œ±))

Cantor·∂ú-infty : to-Cantor·∂ú infty·∂ú Ôºù repeatÀ¢ false
Cantor·∂ú-infty = fun-ext Œª k ‚Üí Cantor·µè-infty

-- stream closeness

closeness·µèÀ¢-body : is-discrete A
                ‚Üí ‚ñπ k (gStream k A ‚Üí gStream k A ‚Üí ‚Ñï‚àû·µè k) ‚Üí gStream k A ‚Üí gStream k A ‚Üí ‚Ñï‚àû·µè k
closeness·µèÀ¢-body d c‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) with (is-discrete-Œ≤ d h‚ÇÅ h‚ÇÇ)
... | yes e   = cosu (c‚ñπ ‚äõ t‚ñπ‚ÇÅ ‚äõ t‚ñπ‚ÇÇ)
... | no ctra = coze

closeness·µèÀ¢ : is-discrete A
            ‚Üí gStream k A ‚Üí gStream k A ‚Üí ‚Ñï‚àû·µè k
closeness·µèÀ¢ d = fix (closeness·µèÀ¢-body d)

closeness·µèÀ¢-refl : (d : is-discrete A)
                 ‚Üí (s : gStream k A) ‚Üí closeness·µèÀ¢ d s s Ôºù infty·µè
closeness·µèÀ¢-refl d = fix (go d)
  where
  go : ‚àÄ {A} ‚Üí (d : is-discrete A)
     ‚Üí ‚ñπ k ((s : gStream k A) ‚Üí closeness·µèÀ¢ d s s Ôºù infty·µè)
     ‚Üí      (s : gStream k A) ‚Üí closeness·µèÀ¢ d s s Ôºù infty·µè
  go d ih‚ñπ (cons h t‚ñπ) with (is-discrete-Œ≤ d h h)
  ... | yes e = ap cosu (‚ñπ-ext Œª Œ± ‚Üí (Œª i ‚Üí pfix (closeness·µèÀ¢-body d) i Œ± (t‚ñπ Œ±) (t‚ñπ Œ±))
                                   ‚àô ih‚ñπ Œ± (t‚ñπ¬†Œ±)
                                   ‚àô ‚ñπ-ap (sym $ pfix cosu) Œ±)
  ... | no ctra = absurd (ctra refl)

close‚àû‚Üíequal·µèÀ¢ : (d : is-discrete A)
               ‚Üí (s t : gStream k A)
               ‚Üí closeness·µèÀ¢ d s t Ôºù infty·µè ‚Üí s Ôºù t
close‚àû‚Üíequal·µèÀ¢ d = fix (go d)
  where
  go : ‚àÄ {A} ‚Üí (d : is-discrete A)
     ‚Üí ‚ñπ k ((s t : gStream k A) ‚Üí closeness·µèÀ¢ d s t Ôºù infty·µè ‚Üí s Ôºù t)
     ‚Üí      (s t : gStream k A) ‚Üí closeness·µèÀ¢ d s t Ôºù infty·µè ‚Üí s Ôºù t
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) e with (is-discrete-Œ≤ d h‚ÇÅ h‚ÇÇ)
  ... | yes eh = ap¬≤ cons eh (‚ñπ-ext Œª Œ± ‚Üí ih‚ñπ Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÇ Œ±)
                                             ((Œª i ‚Üí pfix (closeness·µèÀ¢-body d) (~ i) Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÇ Œ±))
                                              ‚àô ‚ñπ-ap (cosu-inj e ‚àô pfix cosu) Œ±))
  ... | no ctra = absurd (cosu‚â†coze (sym e))

closeness·µèÀ¢-comm : (d : is-discrete A)
                 ‚Üí (s t : gStream k A)
                 ‚Üí closeness·µèÀ¢ d s t Ôºù closeness·µèÀ¢ d t s
closeness·µèÀ¢-comm d = fix (go d)
  where
  go : ‚àÄ {A} ‚Üí (d : is-discrete A)
     ‚Üí ‚ñπ k ((s t : gStream k A) ‚Üí closeness·µèÀ¢ d s t Ôºù closeness·µèÀ¢ d t s) ‚Üí
            (s t : gStream k A) ‚Üí closeness·µèÀ¢ d s t Ôºù closeness·µèÀ¢ d t s
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) with (is-discrete-Œ≤ d h‚ÇÅ h‚ÇÇ)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) | yes eh with (is-discrete-Œ≤ d h‚ÇÇ h‚ÇÅ) -- AARGH
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) | yes eh | yes eh‚Ä≤ =
    ap cosu (‚ñπ-ext Œª Œ± ‚Üí (Œª i ‚Üí pfix (closeness·µèÀ¢-body d) i Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÇ Œ±))
                       ‚àô ih‚ñπ Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÇ Œ±)
                       ‚àô Œª i ‚Üí pfix (closeness·µèÀ¢-body d) (~ i) Œ± (t‚ñπ‚ÇÇ Œ±) (t‚ñπ‚ÇÅ Œ±) )
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) | yes eh | no ctra‚Ä≤ = absurd (ctra‚Ä≤ (sym eh))
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) | no ctra with (is-discrete-Œ≤ d h‚ÇÇ h‚ÇÅ) -- AARGH
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) | no ctra | yes eh‚Ä≤ = absurd (ctra (sym eh‚Ä≤))
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) | no ctra | no ctra‚Ä≤ = refl

closeness·µèÀ¢-ultra : (d : is-discrete A)
                 ‚Üí (x y z : gStream k A)
                 ‚Üí min·µè (closeness·µèÀ¢ d x y) (closeness·µèÀ¢ d y z) ‚â§·µè closeness·µèÀ¢ d x z
closeness·µèÀ¢-ultra d = fix (go d)
  where
  go : ‚àÄ {A} ‚Üí (d : is-discrete A)
     ‚Üí ‚ñπ k ((x y z : gStream k A) ‚Üí min·µè (closeness·µèÀ¢ d x y) (closeness·µèÀ¢ d y z) ‚â§·µè closeness·µèÀ¢ d x z)
     ‚Üí      (x y z : gStream k A) ‚Üí min·µè (closeness·µèÀ¢ d x y) (closeness·µèÀ¢ d y z) ‚â§·µè closeness·µèÀ¢ d x z
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) with (is-discrete-Œ≤ d h‚ÇÅ h‚ÇÇ)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | yes e‚ÇÅ‚ÇÇ with (is-discrete-Œ≤ d h‚ÇÇ h‚ÇÉ)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | yes e‚ÇÅ‚ÇÇ | yes e‚ÇÇ‚ÇÉ with (is-discrete-Œ≤ d h‚ÇÅ h‚ÇÉ)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | yes e‚ÇÅ‚ÇÇ | yes e‚ÇÇ‚ÇÉ | yes e‚ÇÅ‚ÇÉ =
    s‚â§·µès Œª Œ± ‚Üí
      transport (Œª i ‚Üí pfix min·µè-body (~ i) Œ± (dfix (closeness·µèÀ¢-body d) Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÇ Œ±))
                                              (dfix (closeness·µèÀ¢-body d) Œ± (t‚ñπ‚ÇÇ Œ±) (t‚ñπ‚ÇÉ Œ±))
                                            ‚â§·µè dfix (closeness·µèÀ¢-body d) Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÉ Œ±)) $
      transport (Œª i ‚Üí min·µè (pfix (closeness·µèÀ¢-body d) (~ i) Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÇ Œ±))
                            (pfix (closeness·µèÀ¢-body d) (~ i) Œ± (t‚ñπ‚ÇÇ Œ±) (t‚ñπ‚ÇÉ Œ±))
                          ‚â§·µè pfix (closeness·µèÀ¢-body d) (~ i) Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÉ Œ±)) $
      ih‚ñπ Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÇ Œ±) (t‚ñπ‚ÇÉ Œ±)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | yes e‚ÇÅ‚ÇÇ | yes e‚ÇÇ‚ÇÉ | no ne‚ÇÅ‚ÇÉ =
    absurd (ne‚ÇÅ‚ÇÉ (e‚ÇÅ‚ÇÇ ‚àô e‚ÇÇ‚ÇÉ))
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | yes e‚ÇÅ‚ÇÇ | no ne‚ÇÇ‚ÇÉ with (is-discrete-Œ≤ d h‚ÇÅ h‚ÇÉ)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | yes e‚ÇÅ‚ÇÇ | no ne‚ÇÇ‚ÇÉ | yes e‚ÇÅ‚ÇÉ =
    absurd (ne‚ÇÇ‚ÇÉ (sym e‚ÇÅ‚ÇÇ ‚àô e‚ÇÅ‚ÇÉ))
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | yes e‚ÇÅ‚ÇÇ | no ne‚ÇÇ‚ÇÉ | no ne‚ÇÅ‚ÇÉ =
    z‚â§·µèn
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | no ne‚ÇÅ‚ÇÇ with (is-discrete-Œ≤ d h‚ÇÇ h‚ÇÉ)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | no ne‚ÇÅ‚ÇÇ | yes e‚ÇÇ‚ÇÉ with (is-discrete-Œ≤ d h‚ÇÅ h‚ÇÉ)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | no ne‚ÇÅ‚ÇÇ | yes e‚ÇÇ‚ÇÉ | yes e‚ÇÅ‚ÇÉ =
    absurd (ne‚ÇÅ‚ÇÇ (e‚ÇÅ‚ÇÉ ‚àô sym e‚ÇÇ‚ÇÉ))
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | no ne‚ÇÅ‚ÇÇ | yes e‚ÇÇ‚ÇÉ | no ne‚ÇÅ‚ÇÉ =
    z‚â§·µèn
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | no ne‚ÇÅ‚ÇÇ | no ne‚ÇÇ‚ÇÉ with (is-discrete-Œ≤ d h‚ÇÅ h‚ÇÉ)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | no ne‚ÇÅ‚ÇÇ | no ne‚ÇÇ‚ÇÉ | yes e‚ÇÅ‚ÇÉ =
    z‚â§·µèn
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | no ne‚ÇÅ‚ÇÇ | no ne‚ÇÇ‚ÇÉ | no ne‚ÇÅ‚ÇÉ =
    z‚â§·µèn

closenessÀ¢ : is-discrete A
           ‚Üí Stream A ‚Üí Stream A ‚Üí ‚Ñï‚àû
closenessÀ¢ ds s t k = closeness·µèÀ¢ ds (s k) (t k)

closenessÀ¢-refl : (d : is-discrete A)
                ‚Üí (s : Stream A) ‚Üí closenessÀ¢ d s s Ôºù infty·∂ú
closenessÀ¢-refl d s = fun-ext Œª k ‚Üí closeness·µèÀ¢-refl d (s k)

close‚àû‚ÜíequalÀ¢ : (d : is-discrete A)
              ‚Üí (s t : Stream A)
              ‚Üí closenessÀ¢ d s t Ôºù infty·∂ú ‚Üí s Ôºù t
close‚àû‚ÜíequalÀ¢ d s t e = fun-ext Œª k ‚Üí close‚àû‚Üíequal·µèÀ¢ d (s k) (t k) (happly e k)

closenessÀ¢-comm : (d : is-discrete A)
                ‚Üí (s t : Stream A) ‚Üí closenessÀ¢ d s t Ôºù closenessÀ¢ d t s
closenessÀ¢-comm d s t = fun-ext Œª k ‚Üí closeness·µèÀ¢-comm d (s k) (t k)

closenessÀ¢-ultra : (d : is-discrete A)
                 ‚Üí (x y z : Stream A)
                 ‚Üí min·∂ú (closenessÀ¢ d x y) (closenessÀ¢ d y z) ‚â§·∂ú closenessÀ¢ d x z
closenessÀ¢-ultra d x y z k = closeness·µèÀ¢-ultra d (x k) (y k) (z k)
