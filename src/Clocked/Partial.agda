{-# OPTIONS --cubical --guarded #-}
module Clocked.Partial where

open import Prelude
open import Later

private variable
  A B : ๐ฐ
  k : Cl

-- partiality monad aka Lift

data gPart (k : Cl) (A : ๐ฐ) : ๐ฐ where
  now   : A โ gPart k A
  later : โน k (gPart k A) โ gPart k A

_>>=แต_ : gPart k A โ (A โ gPart k B) โ gPart k B
now x   >>=แต f = f x
later x >>=แต f = later ฮป ฮฑ โ x ฮฑ >>=แต f

Part : ๐ฐ โ ๐ฐ
Part A = โ k โ gPart k A

pureแต : A โ Part A
pureแต a k = now a

_>>=แต_ : Part A โ (A โ Part B) โ Part B
_>>=แต_ p f k = p k >>=แต ฮป a โ f a k

-- TODO needs modulus
-- collatz : โ โ Part โค
-- collatz n k = ?
