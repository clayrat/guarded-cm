{-# OPTIONS --guarded #-}
module Clocked.Computation1 where

open import Prelude
open import Data.Empty
open import Data.Nat
open import Data.Nat.Two
open import Data.Nat.Order.Base
open import Data.Bool

open import Later

private variable
  โ : Level
  A : ๐ฐ โ
  k : Cl

-- Megacz's computation monad aka trampoline (homogeneous version)

data gComp (k : Cl) (A : ๐ฐ โ) : ๐ฐ โ where
  retแต  : A โ gComp k A
  bindแต : (A โ โน k (gComp k A)) โ โน k (gComp k A) โ gComp k A

module gComp-code where

  Code-body : โน k (gComp k A โ gComp k A โ ๐ฐ (level-of-type A))
            โ gComp k A โ gComp k A โ ๐ฐ (level-of-type A)
  Code-body     Cโน (retแต x)      (retแต y)      = x ๏ผ y
  Code-body     Cโน (retแต _)      (bindแต _ _)   = Lift _ โฅ
  Code-body     Cโน (bindแต _ _)   (retแต _)      = Lift _ โฅ
  Code-body {k} Cโน (bindแต kx xโน) (bindแต ky yโน) = โธ k (Cโน โ xโน โ yโน) ร (โ a โ โธ k (Cโน โ kx a โ ky a))

  Code : gComp k A โ gComp k A โ ๐ฐ (level-of-type A)
  Code = fix Code-body

  Code-bb-eq : {kx ky : A โ โน k (gComp k A)} {xโน yโน : โน k (gComp k A)}
             โ Code (bindแต kx xโน) (bindแต ky yโน) ๏ผ (โธ k (โนmap Code xโน โ yโน)) ร (โ a โ โธ k (โนmap Code (kx a) โ ky a))
  Code-bb-eq {k} {kx} {ky} {xโน} {yโน} i = (โน[ ฮฑ โถ k ] pfix Code-body i ฮฑ (xโน ฮฑ) (yโน ฮฑ))
                                   ร (โ a โ โน[ ฮฑ โถ k ] pfix Code-body i ฮฑ (kx a ฮฑ) (ky a ฮฑ))

  Code-bbโ : {kx ky : A โ โน k (gComp k A)} {xโน yโน : โน k (gComp k A)}
           โ Code (bindแต kx xโน) (bindแต ky yโน)
           โ (โธ k (โนmap Code xโน โ yโน)) ร (โ a โ โธ k (โนmap Code (kx a) โ ky a))
  Code-bbโ = transport Code-bb-eq

  โCode-bb : {kx ky : A โ โน k (gComp k A)} {xโน yโน : โน k (gComp k A)}
           โ (โธ k (โนmap Code xโน โ yโน)) ร (โ a โ โธ k (โนmap Code (kx a) โ ky a))
           โ Code (bindแต kx xโน) (bindแต ky yโน)
  โCode-bb = transport (sym Code-bb-eq)

  Code-refl-body : โน k ((c : gComp k A) โ Code c c) โ (c : gComp k A) โ Code c c
  Code-refl-body Cโน (retแต x)      = refl
  Code-refl-body Cโน (bindแต kx xโน) = โCode-bb ((Cโน โ xโน) , ฮป a โ Cโน โ kx a)

  Code-refl : (c : gComp k A) โ Code c c
  Code-refl = fix Code-refl-body

  encode : {p q : gComp k A} โ p ๏ผ q โ Code p q
  encode {p} {q} e = subst (Code p) e (Code-refl p)

  decode : โ (p q : gComp k A) โ Code p q โ p ๏ผ q
  decode (retแต x)      (retแต y)      c = ap retแต c
  decode (bindแต kx xโน) (bindแต ky yโน) c =
    let (ex , ek) = Code-bbโ c in
    apยฒ bindแต
      (fun-ext ฮป a โ โน-ext ฮป ฮฑ โ decode (kx a ฮฑ) (ky a ฮฑ) (ek a ฮฑ))
      (โน-ext ฮป ฮฑ โ decode (xโน ฮฑ) (yโน ฮฑ) (ex ฮฑ))

retแต-inj : {x y : A}
         โ retแต {k = k} x ๏ผ retแต y โ x ๏ผ y
retแต-inj = gComp-code.encode


bindแต-inj : {kx ky : A โ โน k (gComp k A)} {xโน yโน : โน k (gComp k A)}
         โ bindแต kx xโน ๏ผ bindแต ky yโน โ (xโน ๏ผ yโน) ร (kx ๏ผ ky)
bindแต-inj {kx} {ky} {xโน} {yโน} e =
  let (cx , ck) = gComp-code.Code-bbโ (gComp-code.encode e) in
    (โน-ext ฮป ฮฑ โ gComp-code.decode (xโน ฮฑ) (yโน ฮฑ) (cx ฮฑ))
  , (fun-ext ฮป a โ โน-ext ฮป ฮฑ โ gComp-code.decode (kx a ฮฑ) (ky a ฮฑ) (ck a ฮฑ))

callแต : โน k (gComp k A) โ gComp k A
callแต = bindแต (next โ retแต)

ฮดแต : gComp k A โ gComp k A
ฮดแต = callแต โ next

callฯ : gComp k A
callฯ = fix callแต

callWithแต : (A โ A) โ โน k (gComp k A) โ gComp k A
callWithแต f = bindแต (next โ retแต โ f)

Comp : ๐ฐ โ โ ๐ฐ โ
Comp A = โ k โ gComp k A

ret  : A โ Comp A
ret a k = retแต a

bind : (A โ Comp A) โ Comp A โ Comp A
bind f c k = bindแต (ฮป b โ next (f b k)) (next (c k))

-- examples

pow2แต : โ โ gComp k โ
pow2แต = fix ฮป pโน โ ฮป where
  zero    โ retแต 1
  (suc n) โ if even n
              then callWithแต (2 ยท_) (pโน โ next n)
              else callWithแต (ฮป x โ x ยท x) (pโน โ next (n รท2โ))

pow2 : โ โ Comp โ
pow2 n k = pow2แต n

gcdแต : โ โ โ โ gComp k โ
gcdแต = fix ฮป gโน โ ฮป where
  zero     m      โ retแต m
  (suc n)  zero   โ retแต (suc n)
  (suc n) (suc m) โ if n โคแต m
                      then callแต (gโน โ next (suc n) โ next (m โธ n))
                      else callแต (gโน โ next (n โธ m) โ next (suc m))

gcd : โ โ โ โ Comp โ
gcd n m k = gcdแต n m

mccarthyแต : โ โ gComp k โ
mccarthyแต = fix ฮป mโน n โ
  if n โคแต 100
    then bindแต (ฮป m โ mโน โ next m) (mโน โ next (11 + n))
    else retแต (n โธ 10)

mccarthy : โ โ Comp โ
mccarthy n k = mccarthyแต n

