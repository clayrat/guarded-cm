{-# OPTIONS --guarded #-}
module Guarded.Loeb where

open import Prelude
open import Data.Empty
open import Data.Nat
open import Data.Maybe
open import Data.List

open import LaterG
open import Guarded.Partial

private variable
  ‚Ñì·µÉ : Level
  A : ùí∞ ‚Ñì·µÉ

loeb-body : {F : Effect} ‚¶É t : Map F ‚¶Ñ
     ‚Üí (let module F = Effect F)
     ‚Üí F.‚ÇÄ (‚ñπ F.‚ÇÄ A ‚Üí A)
     ‚Üí ‚ñπ F.‚ÇÄ A ‚Üí F.‚ÇÄ A
loeb-body fs as‚ñπ = map (_$ as‚ñπ) fs

loeb : {F : Effect} ‚¶É t : Map F ‚¶Ñ
     ‚Üí (let module F = Effect F)
     ‚Üí F.‚ÇÄ (‚ñπ F.‚ÇÄ A ‚Üí A) ‚Üí F.‚ÇÄ A
loeb fs = fix (loeb-body fs)

-- example from http://blog.sigfpe.com/2006/11/from-l-theorem-to-spreadsheet.html

len‚ñπ : ‚ñπ List (Part ‚Ñï) ‚Üí Part ‚Ñï
len‚ñπ xs‚ñπ = later (now ‚àò length ‚çâ xs‚ñπ)

-- hang if undefined
probe : Maybe (Part A) ‚Üí Part A
probe nothing = map·µñ (Œª v ‚Üí absurd v) never
probe (just p) = p

at0‚ñπ : ‚ñπ List (Part ‚Ñï) ‚Üí Part ‚Ñï
at0‚ñπ xs‚ñπ = later ((Œª xs ‚Üí probe (mnth xs 0)) ‚çâ xs‚ñπ)

test : List (‚ñπ List (Part ‚Ñï) ‚Üí Part ‚Ñï)
test = len‚ñπ ‚à∑ at0‚ñπ ‚à∑ []

test-exec : loeb test Ôºù delay-by 1 2 ‚à∑ delay-by 2 2 ‚à∑ []
test-exec =
  loeb test
    Ôºù‚ü® fix-path (loeb-body test) ‚ü©
  len‚ñπ (next (loeb test)) ‚à∑ at0‚ñπ (next (loeb test)) ‚à∑ []
    Ôºù‚ü®‚ü©
  delay-by 1 (length (loeb test)) ‚à∑ Œ¥·µñ (probe (mnth (loeb test) 0)) ‚à∑ []
    Ôºù‚ü® ap (Œª q ‚Üí Œ¥·µñ (now (length q)) ‚à∑ Œ¥·µñ (probe (mnth q 0)) ‚à∑ []) (fix-path (loeb-body test)) ‚ü©
  delay-by 1 2 ‚à∑ delay-by 2 (length (loeb test)) ‚à∑ []
    Ôºù‚ü® ap (Œª q ‚Üí delay-by 1 2 ‚à∑ delay-by 2 (length q) ‚à∑ []) (fix-path (loeb-body test)) ‚ü©
  delay-by 1 2 ‚à∑ delay-by 2 2 ‚à∑ []
    ‚àé
