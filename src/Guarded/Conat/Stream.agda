{-# OPTIONS --guarded #-}
module Guarded.Conat.Stream where

open import Prelude
open import Data.Empty
open import Data.Bool
open import Data.Dec

open import LaterG
open import Guarded.Conat
open import Guarded.Conat.Arith
open import Guarded.Stream
open import Guarded.Stream.Quantifiers

private variable
  ‚Ñì : Level
  A : ùí∞ ‚Ñì

-- stream interaction

to-stream·∂ú-body : ‚ñπ (‚Ñï‚àû ‚Üí Stream Bool) ‚Üí ‚Ñï‚àû ‚Üí Stream Bool
to-stream·∂ú-body ts‚ñπ  coze     = repeatÀ¢ false
to-stream·∂ú-body ts‚ñπ (cosu n‚ñπ) = cons true (ts‚ñπ ‚äõ n‚ñπ)

-- Escardo's Œπ
to-stream·∂ú : ‚Ñï‚àû ‚Üí Stream Bool
to-stream·∂ú = fix to-stream·∂ú-body

infty-stream : to-stream·∂ú infty Ôºù repeatÀ¢ true
infty-stream = fix Œª prf‚ñπ ‚Üí
  to-stream·∂ú infty
    Ôºù‚ü® ap (_$ infty) (fix-path to-stream·∂ú-body) ‚ü©
  to-stream·∂ú-body (next to-stream·∂ú) ‚åú infty ‚åù
    Ôºù‚ü® ap! (fix-path cosu) ‚ü©
  to-stream·∂ú-body (next to-stream·∂ú) (cosu (next infty))
    Ôºù‚ü®‚ü©
  cons true ‚åú next (to-stream·∂ú infty) ‚åù
    Ôºù‚ü® ap! (‚ñπ-ext prf‚ñπ) ‚ü©
  cons true (next (repeatÀ¢ true))
    ÔºùÀò‚ü® fix-path (cons true) ‚ü©
  repeatÀ¢ true
    ‚àé

to-stream·∂ú-inj : (n m : ‚Ñï‚àû) ‚Üí to-stream·∂ú n Ôºù to-stream·∂ú m ‚Üí n Ôºù m
to-stream·∂ú-inj = fix Œª prf‚ñπ ‚Üí
  Œª where
      coze       coze     e ‚Üí refl
      coze      (cosu _)  e ‚Üí absurd (false‚â†true (cons-inj e .fst))
      (cosu _)   coze     e ‚Üí absurd (true‚â†false (cons-inj e .fst))
      (cosu n‚ñπ) (cosu m‚ñπ) e ‚Üí
        ap cosu (‚ñπ-ext Œª Œ± ‚Üí prf‚ñπ Œ± (n‚ñπ Œ±) (m‚ñπ Œ±)
                                  ((Œª i ‚Üí pfix to-stream·∂ú-body (~ i) Œ± (n‚ñπ Œ±))
                                   ‚àô ‚ñπ-ap (cons-inj e .snd) Œ±
                                   ‚àô Œª i ‚Üí pfix to-stream·∂ú-body i Œ± (m‚ñπ Œ±)))

-- TODO stream hlevel
--to-stream·∂ú-emb : is-embedding to-stream·∂ú
--to-stream·∂ú-emb = set-injective‚Üíis-embedding {!!} Œª {x} {y} ‚Üí to-stream·∂ú-inj x y

decreasing : Stream Bool ‚Üí ùí∞
decreasing = AdjÀ¢ (Œª p q ‚Üí p or (not q) Ôºù true)

-- TODO upstream
or-neg : (a : Bool) ‚Üí a or not a Ôºù true
or-neg true  = refl
or-neg false = refl

to-stream·∂ú-decreasing : (n : ‚Ñï‚àû) ‚Üí decreasing (to-stream·∂ú n)
to-stream·∂ú-decreasing =
  fix Œª ih‚ñπ ‚Üí Œª where
    coze      ‚Üí repeat-adj or-neg false
    (cosu n‚ñπ) ‚Üí
      Adj-cons (next refl) Œª Œ± ‚Üí transport (Œª i ‚Üí decreasing (pfix to-stream·∂ú-body (~ i) Œ± (n‚ñπ Œ±))) ((ih‚ñπ ‚äõ n‚ñπ) Œ±)

-- Cantor encoding (single bit)

to-Cantor·∂ú-body : ‚ñπ (‚Ñï‚àû ‚Üí Stream Bool) ‚Üí ‚Ñï‚àû ‚Üí Stream Bool
to-Cantor·∂ú-body ts‚ñπ  coze     = cons-Œ¥ true (repeatÀ¢ false)
to-Cantor·∂ú-body ts‚ñπ (cosu n‚ñπ) = cons false (ts‚ñπ ‚äõ n‚ñπ)

to-Cantor·∂ú : ‚Ñï‚àû ‚Üí Stream Bool
to-Cantor·∂ú = fix to-Cantor·∂ú-body

Cantor-infty : to-Cantor·∂ú infty Ôºù repeatÀ¢ false
Cantor-infty =
  fix Œª ih‚ñπ ‚Üí
    ap (cons false) (‚ñπ-ext Œª Œ± ‚Üí (Œª i ‚Üí dfix to-Cantor·∂ú-body Œ± (pfix cosu i Œ±))
                               ‚àô (Œª i ‚Üí pfix to-Cantor·∂ú-body i Œ± infty)
                               ‚àô ih‚ñπ Œ±
                               ‚àô (Œª i ‚Üí pfix (cons false) (~ i) Œ±))

-- stream closeness

closenessÀ¢-body : is-discrete A
                ‚Üí ‚ñπ (Stream A ‚Üí Stream A ‚Üí ‚Ñï‚àû) ‚Üí Stream A ‚Üí Stream A ‚Üí ‚Ñï‚àû
closenessÀ¢-body d c‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) with (is-discrete-Œ≤ d h‚ÇÅ h‚ÇÇ)
... | yes e   = cosu (c‚ñπ ‚äõ t‚ñπ‚ÇÅ ‚äõ t‚ñπ‚ÇÇ)
... | no ctra = coze

closenessÀ¢ : is-discrete A
           ‚Üí Stream A ‚Üí Stream A ‚Üí ‚Ñï‚àû
closenessÀ¢ d = fix (closenessÀ¢-body d)

closenessÀ¢-refl : (d : is-discrete A)
                ‚Üí (s : Stream A) ‚Üí closenessÀ¢ d s s Ôºù infty
closenessÀ¢-refl d = fix (go d)
  where
  go : ‚àÄ {A} ‚Üí (d : is-discrete A)
     ‚Üí ‚ñπ ((s : Stream A) ‚Üí closenessÀ¢ d s s Ôºù infty)
     ‚Üí (s : Stream A) ‚Üí closenessÀ¢ d s s Ôºù infty
  go d ih‚ñπ (cons h t‚ñπ) with (is-discrete-Œ≤ d h h)
  ... | yes e = ap cosu (‚ñπ-ext Œª Œ± ‚Üí (Œª i ‚Üí pfix (closenessÀ¢-body d) i Œ± (t‚ñπ Œ±) (t‚ñπ Œ±))
                                   ‚àô ih‚ñπ Œ± (t‚ñπ¬†Œ±)
                                   ‚àô ‚ñπ-ap (sym $ pfix cosu) Œ±)
  ... | no ctra = absurd (ctra refl)

close‚àû‚ÜíequalÀ¢ : (d : is-discrete A)
             ‚Üí (s t : Stream A)
             ‚Üí closenessÀ¢ d s t Ôºù infty ‚Üí s Ôºù t
close‚àû‚ÜíequalÀ¢ d = fix (go d)
  where
  go : ‚àÄ {A} ‚Üí (d : is-discrete A)
     ‚Üí ‚ñπ ((s t : Stream A) ‚Üí closenessÀ¢ d s t Ôºù infty ‚Üí s Ôºù t)
     ‚Üí (s t : Stream A) ‚Üí closenessÀ¢ d s t Ôºù infty ‚Üí s Ôºù t
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) e with (is-discrete-Œ≤ d h‚ÇÅ h‚ÇÇ)
  ... | yes eh = ap¬≤ cons eh (‚ñπ-ext Œª Œ± ‚Üí ih‚ñπ Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÇ Œ±)
                                             ((Œª i ‚Üí pfix (closenessÀ¢-body d) (~ i) Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÇ Œ±))
                                              ‚àô ‚ñπ-ap (cosu-inj e ‚àô pfix cosu) Œ±))
  ... | no ctra = absurd (cosu‚â†coze (sym e))

closenessÀ¢-comm : (d : is-discrete A)
                ‚Üí (s t : Stream A) ‚Üí closenessÀ¢ d s t Ôºù closenessÀ¢ d t s
closenessÀ¢-comm d = fix (go d)
  where
  go : ‚àÄ {A} ‚Üí (d : is-discrete A) ‚Üí
     ‚ñπ ((s t : Stream A) ‚Üí closenessÀ¢ d s t Ôºù closenessÀ¢ d t s) ‚Üí
       (s t : Stream A) ‚Üí closenessÀ¢ d s t Ôºù closenessÀ¢ d t s
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) with (is-discrete-Œ≤ d h‚ÇÅ h‚ÇÇ)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) | yes eh with (is-discrete-Œ≤ d h‚ÇÇ h‚ÇÅ) -- AARGH
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) | yes eh | yes eh‚Ä≤ =
    ap cosu (‚ñπ-ext Œª Œ± ‚Üí (Œª i ‚Üí pfix (closenessÀ¢-body d) i Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÇ Œ±))
                       ‚àô ih‚ñπ Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÇ Œ±)
                       ‚àô Œª i ‚Üí pfix (closenessÀ¢-body d) (~ i) Œ± (t‚ñπ‚ÇÇ Œ±) (t‚ñπ‚ÇÅ Œ±) )
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) | yes eh | no ctra‚Ä≤ = absurd (ctra‚Ä≤ (sym eh))
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) | no ctra with (is-discrete-Œ≤ d h‚ÇÇ h‚ÇÅ) -- AARGH
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) | no ctra | yes eh‚Ä≤ = absurd (ctra (sym eh‚Ä≤))
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) | no ctra | no ctra‚Ä≤ = refl

closenessÀ¢-ultra : (d : is-discrete A)
                 ‚Üí (x y z : Stream A)
                 ‚Üí min·∂ú (closenessÀ¢ d x y) (closenessÀ¢ d y z) ‚â§·∂ú closenessÀ¢ d x z
closenessÀ¢-ultra d = fix (go d)
  where
  go : ‚àÄ {A} ‚Üí (d : is-discrete A)
     ‚Üí ‚ñπ ((x y z : Stream A) ‚Üí min·∂ú (closenessÀ¢ d x y) (closenessÀ¢ d y z) ‚â§·∂ú closenessÀ¢ d x z)
     ‚Üí (x y z : Stream A) ‚Üí min·∂ú (closenessÀ¢ d x y) (closenessÀ¢ d y z) ‚â§·∂ú closenessÀ¢ d x z
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) with (is-discrete-Œ≤ d h‚ÇÅ h‚ÇÇ)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | yes e‚ÇÅ‚ÇÇ with (is-discrete-Œ≤ d h‚ÇÇ h‚ÇÉ)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | yes e‚ÇÅ‚ÇÇ | yes e‚ÇÇ‚ÇÉ with (is-discrete-Œ≤ d h‚ÇÅ h‚ÇÉ)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | yes e‚ÇÅ‚ÇÇ | yes e‚ÇÇ‚ÇÉ | yes e‚ÇÅ‚ÇÉ =
    s‚â§·∂ús Œª Œ± ‚Üí
      transport (Œª i ‚Üí pfix min·∂ú-body (~ i) Œ± (dfix (closenessÀ¢-body d) Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÇ Œ±))
                                              (dfix (closenessÀ¢-body d) Œ± (t‚ñπ‚ÇÇ Œ±) (t‚ñπ‚ÇÉ Œ±))
                                            ‚â§·∂ú dfix (closenessÀ¢-body d) Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÉ Œ±)) $
      transport (Œª i ‚Üí min·∂ú (pfix (closenessÀ¢-body d) (~ i) Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÇ Œ±))
                            (pfix (closenessÀ¢-body d) (~ i) Œ± (t‚ñπ‚ÇÇ Œ±) (t‚ñπ‚ÇÉ Œ±))
                          ‚â§·∂ú pfix (closenessÀ¢-body d) (~ i) Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÉ Œ±)) $
      ih‚ñπ Œ± (t‚ñπ‚ÇÅ Œ±) (t‚ñπ‚ÇÇ Œ±) (t‚ñπ‚ÇÉ Œ±)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | yes e‚ÇÅ‚ÇÇ | yes e‚ÇÇ‚ÇÉ | no ne‚ÇÅ‚ÇÉ =
    absurd (ne‚ÇÅ‚ÇÉ (e‚ÇÅ‚ÇÇ ‚àô e‚ÇÇ‚ÇÉ))
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | yes e‚ÇÅ‚ÇÇ | no ne‚ÇÇ‚ÇÉ with (is-discrete-Œ≤ d h‚ÇÅ h‚ÇÉ)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | yes e‚ÇÅ‚ÇÇ | no ne‚ÇÇ‚ÇÉ | yes e‚ÇÅ‚ÇÉ =
    absurd (ne‚ÇÇ‚ÇÉ (sym e‚ÇÅ‚ÇÇ ‚àô e‚ÇÅ‚ÇÉ))
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | yes e‚ÇÅ‚ÇÇ | no ne‚ÇÇ‚ÇÉ | no ne‚ÇÅ‚ÇÉ =
    z‚â§·∂ún
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | no ne‚ÇÅ‚ÇÇ with (is-discrete-Œ≤ d h‚ÇÇ h‚ÇÉ)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | no ne‚ÇÅ‚ÇÇ | yes e‚ÇÇ‚ÇÉ with (is-discrete-Œ≤ d h‚ÇÅ h‚ÇÉ)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | no ne‚ÇÅ‚ÇÇ | yes e‚ÇÇ‚ÇÉ | yes e‚ÇÅ‚ÇÉ =
    absurd (ne‚ÇÅ‚ÇÇ (e‚ÇÅ‚ÇÉ ‚àô sym e‚ÇÇ‚ÇÉ))
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | no ne‚ÇÅ‚ÇÇ | yes e‚ÇÇ‚ÇÉ | no ne‚ÇÅ‚ÇÉ =
    z‚â§·∂ún
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | no ne‚ÇÅ‚ÇÇ | no ne‚ÇÇ‚ÇÉ with (is-discrete-Œ≤ d h‚ÇÅ h‚ÇÉ)
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | no ne‚ÇÅ‚ÇÇ | no ne‚ÇÇ‚ÇÉ | yes e‚ÇÅ‚ÇÉ =
    z‚â§·∂ún
  go d ih‚ñπ (cons h‚ÇÅ t‚ñπ‚ÇÅ) (cons h‚ÇÇ t‚ñπ‚ÇÇ) (cons h‚ÇÉ t‚ñπ‚ÇÉ) | no ne‚ÇÅ‚ÇÇ | no ne‚ÇÇ‚ÇÉ | no ne‚ÇÅ‚ÇÉ =
    z‚â§·∂ún
