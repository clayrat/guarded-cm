{-# OPTIONS --guarded #-}
module Guarded.Conat.Arith where

open import Prelude
open import Data.Empty
open import Data.Sum

open import LaterG
open import Guarded.Conat

-- partial order

data _‚â§·∂ú_ : ‚Ñï‚àû ‚Üí ‚Ñï‚àû ‚Üí ùí∞ where
  z‚â§·∂ún : ‚àÄ {n}                             ‚Üí coze ‚â§·∂ú n
  s‚â§·∂ús : ‚àÄ {m‚ñπ n‚ñπ} ‚Üí ‚ñπ[ Œ± ] (m‚ñπ Œ± ‚â§·∂ú n‚ñπ Œ±) ‚Üí cosu m‚ñπ ‚â§·∂ú cosu n‚ñπ

¬¨s‚â§·∂úz : (x‚ñπ : ‚ñπ ‚Ñï‚àû) ‚Üí ¬¨ (cosu x‚ñπ ‚â§·∂ú coze)
¬¨s‚â§·∂úz x‚ñπ ()

‚â§·∂ú-refl : (x : ‚Ñï‚àû) ‚Üí x ‚â§·∂ú x
‚â§·∂ú-refl = fix Œª prf‚ñπ ‚Üí Œª where
  coze      ‚Üí z‚â§·∂ún
  (cosu x‚ñπ) ‚Üí s‚â§·∂ús (prf‚ñπ ‚äõ x‚ñπ)

‚â§·∂ú-trans : (x y z : ‚Ñï‚àû) ‚Üí x ‚â§·∂ú y ‚Üí y ‚â§·∂ú z ‚Üí x ‚â§·∂ú z
‚â§·∂ú-trans = fix Œª prf‚ñπ ‚Üí Œª where
  .coze       y          z          z‚â§·∂ún                           _                             ‚Üí
    z‚â§·∂ún
  .(cosu x‚ñπ) .(cosu y‚ñπ) .(cosu z‚ñπ) (s‚â§·∂ús {m‚ñπ = x‚ñπ} {n‚ñπ = y‚ñπ} xy‚ñπ) (s‚â§·∂ús {m‚ñπ = y‚ñπ} {n‚ñπ = z‚ñπ} yz‚ñπ) ‚Üí
    s‚â§·∂ús Œª Œ± ‚Üí prf‚ñπ Œ± (x‚ñπ Œ±) (y‚ñπ Œ±) (z‚ñπ Œ±) (xy‚ñπ Œ±) (yz‚ñπ Œ±)

‚â§·∂ú-antisym : (x y : ‚Ñï‚àû) ‚Üí x ‚â§·∂ú y ‚Üí y ‚â§·∂ú x ‚Üí x Ôºù y
‚â§·∂ú-antisym = fix Œª prf‚ñπ ‚Üí Œª where
  .coze      .coze       z‚â§·∂ún                           z‚â§·∂ún                          ‚Üí
    refl
  .(cosu x‚ñπ) .(cosu y‚ñπ) (s‚â§·∂ús {m‚ñπ = x‚ñπ} {n‚ñπ = y‚ñπ} xy‚ñπ) (s‚â§·∂ús {m‚ñπ = y‚ñπ} {n‚ñπ = x‚ñπ} yx‚ñπ) ‚Üí
    ap cosu (‚ñπ-ext (Œª Œ± ‚Üí prf‚ñπ Œ± (x‚ñπ Œ±) (y‚ñπ Œ±) (xy‚ñπ Œ±) (yx‚ñπ Œ±)))

‚â§·∂ú-inc : (x : ‚Ñï‚àû) ‚Üí x ‚â§·∂ú inc·∂ú x
‚â§·∂ú-inc = fix Œª prf‚ñπ ‚Üí Œª where
  coze      ‚Üí z‚â§·∂ún
  (cosu x‚ñπ) ‚Üí s‚â§·∂ús (transport‚ñπ (Œª i Œ± ‚Üí x‚ñπ Œ± ‚â§·∂ú cosu (Œª Œ±‚ÇÅ ‚Üí tick-irr x‚ñπ Œ± Œ±‚ÇÅ i))
                               (prf‚ñπ ‚äõ x‚ñπ))

‚â§·∂ú-infty : (x : ‚Ñï‚àû) ‚Üí x ‚â§·∂ú infty
‚â§·∂ú-infty = fix Œª prf‚ñπ ‚Üí Œª where
  coze      ‚Üí z‚â§·∂ún
  (cosu x‚ñπ) ‚Üí s‚â§·∂ús (subst (Œª q ‚Üí ‚ñπ[ Œ± ] (x‚ñπ Œ± ‚â§·∂ú q Œ±))
                          (sym $ pfix cosu)
                          (prf‚ñπ ‚äõ x‚ñπ))

‚â§·∂ú-mono : (x y : ‚Ñï‚àû) ‚Üí x ‚â§·∂ú y ‚Üí inc·∂ú x ‚â§·∂ú inc·∂ú y
‚â§·∂ú-mono x y l = s‚â§·∂ús (next l)

‚â§·∂ú-loc : (x y : ‚Ñï‚àû) ‚Üí inc·∂ú x ‚â§·∂ú inc·∂ú y ‚Üí ‚ñπ (x ‚â§·∂ú y)
‚â§·∂ú-loc x y (s‚â§·∂ús l‚ñπ) = l‚ñπ

‚â§·∂ú-prop : (x y : ‚Ñï‚àû) ‚Üí is-prop (x ‚â§·∂ú y)
‚â§·∂ú-prop x y = is-prop-Œ∑ go
  where
  go : ‚àÄ {x y} ‚Üí (p‚ÇÅ p‚ÇÇ : x ‚â§·∂ú y) ‚Üí p‚ÇÅ Ôºù p‚ÇÇ
  go {.coze}                    z‚â§·∂ún                 z‚â§·∂ún      = refl
  go {.(cosu m‚ñπ)} {.(cosu n‚ñπ)} (s‚â§·∂ús {m‚ñπ} {n‚ñπ} l‚ÇÅ‚ñπ) (s‚â§·∂ús l‚ÇÇ‚ñπ) = ap s‚â§·∂ús (‚ñπ-extP Œª Œ± ‚Üí go (l‚ÇÅ‚ñπ Œ±) (l‚ÇÇ‚ñπ Œ±))

-- ‚â§·∂ú-finite looks impossible

-- strict(?) order

_<·∂ú_ : ‚Ñï‚àû ‚Üí ‚Ñï‚àû ‚Üí ùí∞
x <·∂ú y = is-finite-p·∂ú x √ó inc·∂ú x ‚â§·∂ú y

<·∂ú-trans : (x y z : ‚Ñï‚àû) ‚Üí x <·∂ú y ‚Üí y <·∂ú z ‚Üí x <·∂ú z
<·∂ú-trans x y z (fx , ix‚â§y) (_ , iy‚â§z) =
  fx , ‚â§·∂ú-trans (inc·∂ú x) (inc·∂ú y) z
                (‚â§·∂ú-trans (inc·∂ú x) y (inc·∂ú y) ix‚â§y (‚â§·∂ú-inc y))
                iy‚â§z

<·∂ú-weaken : {x y : ‚Ñï‚àû} ‚Üí x <·∂ú y ‚Üí x ‚â§·∂ú y
<·∂ú-weaken {x} {y} (_ , ix‚â§y) = ‚â§·∂ú-trans x (inc·∂ú x) y (‚â§·∂ú-inc x) ix‚â§y

‚â∫·∂ú-inc : {x : ‚Ñï‚àû} ‚Üí is-finite-p·∂ú x ‚Üí x <·∂ú inc·∂ú x
‚â∫·∂ú-inc {x} fx = fx , ‚â§·∂ú-refl (inc·∂ú x)

<·∂ú-mono : (x y : ‚Ñï‚àû) ‚Üí x <·∂ú y ‚Üí inc·∂ú x <·∂ú inc·∂ú y
<·∂ú-mono x y (fx , ix‚â§y) = is-finite-p-up·∂ú x fx , ‚â§·∂ú-mono (inc·∂ú x) y ix‚â§y

<·∂ú-loc : (x y : ‚Ñï‚àû) ‚Üí inc·∂ú x <·∂ú inc·∂ú y ‚Üí ‚ñπ (x <·∂ú y)
<·∂ú-loc x y (fx , ix‚â§y) = ‚ñπmap¬≤ _,_ (is-finite-down-p·∂ú x fx) (‚â§·∂ú-loc (inc·∂ú x) y ix‚â§y)

<·∂ú-prop : (x y : ‚Ñï‚àû) ‚Üí is-prop (x <·∂ú y)
<·∂ú-prop x y = √ó-is-of-hlevel 1 hlevel! (‚â§·∂ú-prop (inc·∂ú x) y)

-- interleaving style operations

-- minimum

min·∂ú-body : ‚ñπ (‚Ñï‚àû ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû) ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû
min·∂ú-body m‚ñπ  coze      _        = coze
min·∂ú-body m‚ñπ (cosu _)   coze     = coze
min·∂ú-body m‚ñπ (cosu x‚ñπ) (cosu y‚ñπ) = cosu (m‚ñπ ‚äõ x‚ñπ ‚äõ y‚ñπ)

min·∂ú : ‚Ñï‚àû ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû
min·∂ú = fix min·∂ú-body

min·∂ú-zerol : (x : ‚Ñï‚àû) ‚Üí min·∂ú coze x Ôºù coze
min·∂ú-zerol x = refl

min·∂ú-zeror : (x : ‚Ñï‚àû) ‚Üí min·∂ú x coze Ôºù coze
min·∂ú-zeror  coze     = refl
min·∂ú-zeror (cosu x‚ñπ) = refl

min·∂ú-zero-inv : (m n : ‚Ñï‚àû) ‚Üí min·∂ú m n Ôºù coze ‚Üí (m Ôºù coze) ‚äé (n Ôºù coze)
min·∂ú-zero-inv  coze      n        e = inl refl
min·∂ú-zero-inv (cosu m‚ñπ)  coze     e = inr refl
min·∂ú-zero-inv (cosu m‚ñπ) (cosu n‚ñπ) e = absurd (cosu‚â†coze e)

min·∂ú-idemp : (x : ‚Ñï‚àû) ‚Üí min·∂ú x x Ôºù x
min·∂ú-idemp = fix Œª prf‚ñπ ‚Üí Œª where
  coze      ‚Üí refl
  (cosu x‚ñπ) ‚Üí ap (Œª q ‚Üí cosu (q ‚äõ x‚ñπ ‚äõ x‚ñπ)) (pfix min·∂ú-body)
            ‚àô ap cosu (‚ñπ-ext (prf‚ñπ ‚äõ x‚ñπ))

min·∂ú-comm : (x y : ‚Ñï‚àû) ‚Üí min·∂ú x y Ôºù min·∂ú y x
min·∂ú-comm = fix Œª prf‚ñπ ‚Üí Œª where
  coze       y        ‚Üí sym (min·∂ú-zeror y)
  (cosu x‚ñπ)  coze     ‚Üí refl
  (cosu x‚ñπ) (cosu y‚ñπ) ‚Üí ap (Œª q ‚Üí cosu (q ‚äõ x‚ñπ ‚äõ y‚ñπ)) (pfix min·∂ú-body)
                      ‚àô ap cosu (‚ñπ-ext Œª Œ± ‚Üí prf‚ñπ Œ± (x‚ñπ Œ±) (y‚ñπ Œ±))
                      ‚àô ap (Œª q ‚Üí cosu (q ‚äõ y‚ñπ ‚äõ x‚ñπ)) (sym $ pfix min·∂ú-body)

min·∂ú-assoc : (x y z : ‚Ñï‚àû) ‚Üí min·∂ú x (min·∂ú y z) Ôºù min·∂ú (min·∂ú x y) z
min·∂ú-assoc = fix Œª prf‚ñπ ‚Üí Œª where
  coze      y         z         ‚Üí refl
  (cosu x‚ñπ) coze      z         ‚Üí refl
  (cosu x‚ñπ) (cosu y‚ñπ) coze      ‚Üí refl
  (cosu x‚ñπ) (cosu y‚ñπ) (cosu z‚ñπ) ‚Üí
      ap (Œª q ‚Üí cosu ((dfix min·∂ú-body) ‚äõ x‚ñπ ‚äõ (q ‚äõ y‚ñπ ‚äõ z‚ñπ))) (pfix min·∂ú-body)
    ‚àô ap (Œª q ‚Üí cosu (q ‚äõ x‚ñπ ‚äõ ((next min·∂ú) ‚äõ y‚ñπ ‚äõ z‚ñπ))) (pfix min·∂ú-body)
    ‚àô ap cosu (‚ñπ-ext (Œª Œ± ‚Üí prf‚ñπ Œ± (x‚ñπ Œ±) (y‚ñπ Œ±) (z‚ñπ Œ±)))
    ‚àô ap (Œª q ‚Üí cosu (q ‚äõ ((next min·∂ú) ‚äõ x‚ñπ ‚äõ y‚ñπ) ‚äõ z‚ñπ)) (sym $ pfix min·∂ú-body)
    ‚àô ap (Œª q ‚Üí cosu ((dfix min·∂ú-body) ‚äõ (q ‚äõ x‚ñπ ‚äõ y‚ñπ) ‚äõ z‚ñπ)) (sym $ pfix min·∂ú-body)

min·∂ú-inftyl : (x : ‚Ñï‚àû) ‚Üí min·∂ú infty x Ôºù x
min·∂ú-inftyl = fix Œª prf‚ñπ ‚Üí Œª where
  coze      ‚Üí refl
  (cosu x‚ñπ) ‚Üí ap (Œª q ‚Üí min·∂ú q (cosu x‚ñπ)) (fix-path cosu)
            ‚àô ap (Œª q ‚Üí cosu (q ‚äõ (next infty) ‚äõ x‚ñπ)) (pfix min·∂ú-body)
            ‚àô ap cosu (‚ñπ-ext (prf‚ñπ ‚äõ x‚ñπ))

min·∂ú-inftyr : (x : ‚Ñï‚àû) ‚Üí min·∂ú x infty Ôºù x
min·∂ú-inftyr x = min·∂ú-comm x infty ‚àô min·∂ú-inftyl x

‚â§·∂ú-min-l : (x y : ‚Ñï‚àû) ‚Üí min·∂ú x y ‚â§·∂ú x
‚â§·∂ú-min-l = fix Œª prf‚ñπ ‚Üí Œª where
  coze      y         ‚Üí z‚â§·∂ún
  (cosu x‚ñπ) coze      ‚Üí z‚â§·∂ún
  (cosu x‚ñπ) (cosu y‚ñπ) ‚Üí s‚â§·∂ús (subst (Œª q ‚Üí ‚ñπ[ Œ± ] ((q ‚äõ x‚ñπ ‚äõ y‚ñπ) Œ± ‚â§·∂ú x‚ñπ Œ±))
                                    (sym $ pfix min·∂ú-body)
                                    (Œª Œ± ‚Üí prf‚ñπ Œ± (x‚ñπ Œ±) (y‚ñπ Œ±)))

‚â§·∂ú-min-r : (x y : ‚Ñï‚àû) ‚Üí min·∂ú x y ‚â§·∂ú y
‚â§·∂ú-min-r x y = subst (_‚â§·∂ú y) (min·∂ú-comm y x) (‚â§·∂ú-min-l y x)

-- maximum

max·∂ú-body : ‚ñπ (‚Ñï‚àû ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû) ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû
max·∂ú-body m‚ñπ  coze      y        = y
max·∂ú-body m‚ñπ (cosu x‚ñπ)  coze     = cosu x‚ñπ
max·∂ú-body m‚ñπ (cosu x‚ñπ) (cosu y‚ñπ) = cosu (m‚ñπ ‚äõ x‚ñπ ‚äõ y‚ñπ)

max·∂ú : ‚Ñï‚àû ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû
max·∂ú = fix max·∂ú-body

max·∂ú-zerol : (x : ‚Ñï‚àû) ‚Üí max·∂ú coze x Ôºù x
max·∂ú-zerol x = refl

max·∂ú-zeror : (x : ‚Ñï‚àû) ‚Üí max·∂ú x coze Ôºù x
max·∂ú-zeror  coze     = refl
max·∂ú-zeror (cosu x‚ñπ) = refl

max·∂ú-idemp : (x : ‚Ñï‚àû) ‚Üí max·∂ú x x Ôºù x
max·∂ú-idemp = fix Œª prf‚ñπ ‚Üí Œª where
  coze      ‚Üí refl
  (cosu x‚ñπ) ‚Üí ap (Œª q ‚Üí cosu (q ‚äõ x‚ñπ ‚äõ x‚ñπ)) (pfix max·∂ú-body)
            ‚àô ap cosu (‚ñπ-ext (prf‚ñπ ‚äõ x‚ñπ))

max·∂ú-comm : (x y : ‚Ñï‚àû) ‚Üí max·∂ú x y Ôºù max·∂ú y x
max·∂ú-comm = fix Œª prf‚ñπ ‚Üí Œª where
  coze       y        ‚Üí sym (max·∂ú-zeror y)
  (cosu x‚ñπ)  coze     ‚Üí refl
  (cosu x‚ñπ) (cosu y‚ñπ) ‚Üí ap (Œª q ‚Üí cosu (q ‚äõ x‚ñπ ‚äõ y‚ñπ)) (pfix max·∂ú-body)
                      ‚àô ap cosu (‚ñπ-ext Œª Œ± ‚Üí prf‚ñπ Œ± (x‚ñπ Œ±) (y‚ñπ Œ±))
                      ‚àô ap (Œª q ‚Üí cosu (q ‚äõ y‚ñπ ‚äõ x‚ñπ)) (sym $ pfix max·∂ú-body)

max·∂ú-assoc : (x y z : ‚Ñï‚àû) ‚Üí max·∂ú x (max·∂ú y z) Ôºù max·∂ú (max·∂ú x y) z
max·∂ú-assoc = fix Œª prf‚ñπ ‚Üí Œª where
  coze      y         z         ‚Üí refl
  (cosu x‚ñπ) coze      z         ‚Üí refl
  (cosu x‚ñπ) (cosu y‚ñπ) coze      ‚Üí refl
  (cosu x‚ñπ) (cosu y‚ñπ) (cosu z‚ñπ) ‚Üí
      ap (Œª q ‚Üí cosu ((dfix max·∂ú-body) ‚äõ x‚ñπ ‚äõ (q ‚äõ y‚ñπ ‚äõ z‚ñπ))) (pfix max·∂ú-body)
    ‚àô ap (Œª q ‚Üí cosu (q ‚äõ x‚ñπ ‚äõ ((next max·∂ú) ‚äõ y‚ñπ ‚äõ z‚ñπ))) (pfix max·∂ú-body)
    ‚àô ap cosu (‚ñπ-ext (Œª Œ± ‚Üí prf‚ñπ Œ± (x‚ñπ Œ±) (y‚ñπ Œ±) (z‚ñπ Œ±)))
    ‚àô ap (Œª q ‚Üí cosu (q ‚äõ ((next max·∂ú) ‚äõ x‚ñπ ‚äõ y‚ñπ) ‚äõ z‚ñπ)) (sym $ pfix max·∂ú-body)
    ‚àô ap (Œª q ‚Üí cosu ((dfix max·∂ú-body) ‚äõ (q ‚äõ x‚ñπ ‚äõ y‚ñπ) ‚äõ z‚ñπ)) (sym $ pfix max·∂ú-body)

max·∂ú-inftyl : (x : ‚Ñï‚àû) ‚Üí max·∂ú infty x Ôºù infty
max·∂ú-inftyl = fix Œª prf‚ñπ ‚Üí Œª where
  coze      ‚Üí refl
  (cosu x‚ñπ) ‚Üí ap (Œª q ‚Üí max·∂ú q (cosu x‚ñπ)) (fix-path cosu)
            ‚àô ap (Œª q ‚Üí cosu (q ‚äõ (next infty) ‚äõ x‚ñπ)) (pfix max·∂ú-body)
            ‚àô ap cosu (‚ñπ-ext (prf‚ñπ ‚äõ x‚ñπ))
            ‚àô sym (fix-path cosu)

max·∂ú-inftyr : (x : ‚Ñï‚àû) ‚Üí max·∂ú x infty Ôºù infty
max·∂ú-inftyr x = max·∂ú-comm x infty ‚àô max·∂ú-inftyl x

‚â§·∂ú-max-l : (x y : ‚Ñï‚àû) ‚Üí x ‚â§·∂ú max·∂ú x y
‚â§·∂ú-max-l = fix Œª prf‚ñπ ‚Üí Œª where
  coze      y         ‚Üí z‚â§·∂ún
  (cosu x‚ñπ) coze      ‚Üí ‚â§·∂ú-refl (cosu x‚ñπ)
  (cosu x‚ñπ) (cosu y‚ñπ) ‚Üí s‚â§·∂ús (subst (Œª q ‚Üí ‚ñπ[ Œ± ] (x‚ñπ Œ± ‚â§·∂ú (q ‚äõ x‚ñπ ‚äõ y‚ñπ) Œ±))
                                    (sym $ pfix max·∂ú-body)
                                    (Œª Œ± ‚Üí prf‚ñπ Œ± (x‚ñπ Œ±) (y‚ñπ Œ±)))

‚â§·∂ú-max-r : (x y : ‚Ñï‚àû) ‚Üí y ‚â§·∂ú max·∂ú x y
‚â§·∂ú-max-r x y = subst (y ‚â§·∂ú_) (max·∂ú-comm y x) (‚â§·∂ú-max-l y x)

-- closeness

closeness·∂ú-body : ‚ñπ (‚Ñï‚àû ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû) ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû
closeness·∂ú-body c‚ñπ  coze      coze     = infty
closeness·∂ú-body c‚ñπ  coze     (cosu _)  = coze
closeness·∂ú-body c‚ñπ (cosu _)   coze     = coze
closeness·∂ú-body c‚ñπ (cosu m‚ñπ) (cosu n‚ñπ) = cosu (c‚ñπ ‚äõ m‚ñπ ‚äõ n‚ñπ)

closeness·∂ú : ‚Ñï‚àû ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû
closeness·∂ú = fix closeness·∂ú-body

closeness·∂ú-refl : (n : ‚Ñï‚àû) ‚Üí closeness·∂ú n n Ôºù infty
closeness·∂ú-refl = fix Œª ih‚ñπ ‚Üí Œª where
  coze      ‚Üí refl
  (cosu n‚ñπ) ‚Üí ap cosu (‚ñπ-ext Œª Œ± ‚Üí (Œª i ‚Üí pfix closeness·∂ú-body i Œ± (n‚ñπ Œ±) (n‚ñπ Œ±))
                                 ‚àô ih‚ñπ Œ± (n‚ñπ Œ±)
                                 ‚àô ‚ñπ-ap (sym $ pfix cosu) Œ±)

close‚àû‚Üíequal : (m n : ‚Ñï‚àû) ‚Üí closeness·∂ú m n Ôºù infty ‚Üí m Ôºù n
close‚àû‚Üíequal = fix Œª ih‚ñπ ‚Üí Œª where
  coze       coze     e ‚Üí refl
  coze      (cosu _)  e ‚Üí absurd (cosu‚â†coze (sym e))
  (cosu _)   coze     e ‚Üí absurd (cosu‚â†coze (sym e))
  (cosu m‚ñπ) (cosu n‚ñπ) e ‚Üí
    ap cosu (‚ñπ-ext Œª Œ± ‚Üí ih‚ñπ Œ± (m‚ñπ Œ±) (n‚ñπ Œ±) ((Œª i ‚Üí pfix closeness·∂ú-body (~ i) Œ± (m‚ñπ Œ±) (n‚ñπ Œ±))
                                              ‚àô ‚ñπ-ap (cosu-inj e ‚àô pfix cosu) Œ±))

closeness·∂ú-comm : (m n : ‚Ñï‚àû) ‚Üí closeness·∂ú m n Ôºù closeness·∂ú n m
closeness·∂ú-comm = fix Œª ih‚ñπ ‚Üí Œª where
  coze       coze     ‚Üí refl
  coze      (cosu _)  ‚Üí refl
  (cosu _)   coze     ‚Üí refl
  (cosu m‚ñπ) (cosu n‚ñπ) ‚Üí ap cosu (‚ñπ-ext Œª Œ± ‚Üí (Œª i ‚Üí pfix closeness·∂ú-body i Œ± (m‚ñπ Œ±) (n‚ñπ Œ±))
                                           ‚àô ih‚ñπ Œ± (m‚ñπ Œ±) (n‚ñπ Œ±)
                                           ‚àô (Œª i ‚Üí pfix closeness·∂ú-body (~ i) Œ± (n‚ñπ Œ±) (m‚ñπ Œ±)))

closeness·∂ú-ultra : (x y z : ‚Ñï‚àû)
                 ‚Üí min·∂ú (closeness·∂ú x y) (closeness·∂ú y z) ‚â§·∂ú closeness·∂ú x z
closeness·∂ú-ultra = fix Œª ih‚ñπ ‚Üí Œª where
  coze       coze      coze     ‚Üí ‚â§·∂ú-infty (min·∂ú infty infty)
  coze       coze     (cosu z‚ñπ) ‚Üí z‚â§·∂ún
  coze      (cosu y‚ñπ)  coze     ‚Üí z‚â§·∂ún
  coze      (cosu y‚ñπ) (cosu z‚ñπ) ‚Üí z‚â§·∂ún
  (cosu x‚ñπ)  coze      coze     ‚Üí z‚â§·∂ún
  (cosu x‚ñπ)  coze     (cosu z‚ñπ) ‚Üí z‚â§·∂ún
  (cosu x‚ñπ) (cosu y‚ñπ)  coze     ‚Üí z‚â§·∂ún
  (cosu x‚ñπ) (cosu y‚ñπ) (cosu z‚ñπ) ‚Üí
    s‚â§·∂ús Œª Œ± ‚Üí
      transport (Œª i ‚Üí pfix min·∂ú-body (~ i) Œ± (dfix closeness·∂ú-body Œ± (x‚ñπ Œ±) (y‚ñπ Œ±))
                                              (dfix closeness·∂ú-body Œ± (y‚ñπ Œ±) (z‚ñπ Œ±))
                                            ‚â§·∂ú dfix closeness·∂ú-body Œ± (x‚ñπ Œ±) (z‚ñπ Œ±)) $
      transport (Œª i ‚Üí min·∂ú (pfix closeness·∂ú-body (~ i) Œ± (x‚ñπ Œ±) (y‚ñπ Œ±))
                            (pfix closeness·∂ú-body (~ i) Œ± (y‚ñπ Œ±) (z‚ñπ Œ±))
                          ‚â§·∂ú pfix closeness·∂ú-body (~ i) Œ± (x‚ñπ Œ±) (z‚ñπ Œ±)) $
      ih‚ñπ Œ± (x‚ñπ Œ±) (y‚ñπ Œ±) (z‚ñπ Œ±)

-- addition

+·∂ú-body : ‚ñπ (‚Ñï‚àû ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû) ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû
+·∂ú-body a‚ñπ  coze      coze     = coze
+·∂ú-body a‚ñπ (cosu x‚ñπ)  coze     = cosu x‚ñπ
+·∂ú-body a‚ñπ  coze     (cosu y‚ñπ) = cosu y‚ñπ
+·∂ú-body a‚ñπ (cosu x‚ñπ) (cosu y‚ñπ) = cosu (next (cosu (a‚ñπ ‚äõ x‚ñπ ‚äõ y‚ñπ)))

_+·∂ú_ : ‚Ñï‚àû ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû
_+·∂ú_ = fix +·∂ú-body

+·∂ú-zerol : (x : ‚Ñï‚àû) ‚Üí coze +·∂ú x Ôºù x
+·∂ú-zerol  coze     = refl
+·∂ú-zerol (cosu x‚ñπ) = refl

+·∂ú-zeror : (x : ‚Ñï‚àû) ‚Üí x +·∂ú coze Ôºù x
+·∂ú-zeror  coze     = refl
+·∂ú-zeror (cosu x‚ñπ) = refl

+·∂ú-comm : (x y : ‚Ñï‚àû) ‚Üí x +·∂ú y Ôºù y +·∂ú x
+·∂ú-comm = fix Œª prf‚ñπ ‚Üí Œª where
  coze       coze      ‚Üí refl
  coze      (cosu x‚ñπ)  ‚Üí refl
  (cosu x‚ñπ)  coze      ‚Üí refl
  (cosu x‚ñπ) (cosu y‚ñπ)  ‚Üí
    (cosu x‚ñπ +·∂ú cosu y‚ñπ)
      Ôºù‚ü®‚ü©
    cosu (next (cosu (dfix +·∂ú-body ‚äõ x‚ñπ ‚äõ y‚ñπ)))
      Ôºù‚ü® ap (Œª q ‚Üí cosu (next (cosu (q ‚äõ x‚ñπ ‚äõ y‚ñπ)))) (pfix +·∂ú-body) ‚ü©
    cosu (next (cosu ((next _+·∂ú_) ‚äõ x‚ñπ ‚äõ y‚ñπ)))
      Ôºù‚ü® ap cosu (‚ñπ-ext (next (ap cosu (‚ñπ-ext Œª Œ± ‚Üí prf‚ñπ Œ± (x‚ñπ Œ±) (y‚ñπ Œ±))))) ‚ü©
    cosu (next (cosu ((next _+·∂ú_) ‚äõ y‚ñπ ‚äõ x‚ñπ)))
      Ôºù‚ü® ap (Œª q ‚Üí cosu (next (cosu (q ‚äõ y‚ñπ ‚äõ x‚ñπ)))) (sym $ pfix +·∂ú-body) ‚ü©
    cosu (next (cosu (dfix +·∂ú-body ‚äõ y‚ñπ ‚äõ x‚ñπ)))
      Ôºù‚ü®‚ü©
    (cosu y‚ñπ +·∂ú cosu x‚ñπ)
      ‚àé

+·∂ú-inftyl : (x : ‚Ñï‚àû) ‚Üí infty +·∂ú x Ôºù infty
+·∂ú-inftyl = fix Œª prf‚ñπ ‚Üí Œª where
  coze      ‚Üí refl
  (cosu x‚ñπ) ‚Üí
     infty +·∂ú cosu x‚ñπ
       Ôºù‚ü® ap (_+·∂ú cosu x‚ñπ) (fix-path cosu) ‚ü©
     cosu (next (cosu ((dfix +·∂ú-body) ‚äõ (next infty) ‚äõ x‚ñπ)))
       Ôºù‚ü® ap (Œª q ‚Üí cosu (next (cosu (q ‚äõ (next infty) ‚äõ x‚ñπ)))) (pfix +·∂ú-body) ‚ü©
     cosu (next (cosu ((next _+·∂ú_) ‚äõ next infty ‚äõ x‚ñπ)))
       Ôºù‚ü® ap cosu (‚ñπ-ext (Œª _ ‚Üí ap cosu (‚ñπ-ext (prf‚ñπ ‚äõ x‚ñπ)))) ‚ü©
     cosu (next (cosu (next (fix cosu))))
       Ôºù‚ü® ap cosu (‚ñπ-ext (Œª _ ‚Üí sym $ fix-path cosu)) ‚ü©
     cosu (next infty)
       Ôºù‚ü® sym $ fix-path cosu ‚ü©
     infty
       ‚àé

+·∂ú-inftyr : (x : ‚Ñï‚àû) ‚Üí x +·∂ú infty Ôºù infty
+·∂ú-inftyr x = +·∂ú-comm x infty ‚àô +·∂ú-inftyl x

-- concatenation style
+:·∂ú-body : ‚Ñï‚àû ‚Üí ‚ñπ (‚Ñï‚àû ‚Üí ‚Ñï‚àû) ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû
+:·∂ú-body x ax‚ñπ  coze    = x
+:·∂ú-body x ax‚ñπ (cosu y) = cosu (ax‚ñπ ‚äõ y)

_+:·∂ú_ : ‚Ñï‚àû ‚Üí ‚Ñï‚àû ‚Üí ‚Ñï‚àû
_+:·∂ú_ x = fix (+:·∂ú-body x)

+:·∂ú-zerol : (x : ‚Ñï‚àû) ‚Üí coze +:·∂ú x Ôºù x
+:·∂ú-zerol = fix Œª prf‚ñπ ‚Üí Œª where
  coze     ‚Üí refl
  (cosu x) ‚Üí cosu (dfix (+:·∂ú-body coze) ‚äõ x)
               Ôºù‚ü® ap (Œª q ‚Üí cosu (q ‚äõ x)) (pfix (+:·∂ú-body coze) ) ‚ü©
             cosu (‚ñπmap (coze +:·∂ú_) x)
               Ôºù‚ü® ap cosu (‚ñπ-ext (prf‚ñπ ‚äõ x)) ‚ü©
             cosu x
               ‚àé

+:·∂ú-zeror : (x : ‚Ñï‚àû) ‚Üí x +·∂ú coze Ôºù x
+:·∂ú-zeror  coze     = refl
+:·∂ú-zeror (cosu x‚ñπ) = refl

-- +·∂ú-sucl doesn't seem to be provable easily

+:·∂ú-sucr : (x : ‚Ñï‚àû) ‚Üí (y‚ñπ : ‚ñπ ‚Ñï‚àû)
        ‚Üí x +:·∂ú (cosu y‚ñπ) Ôºù cosu (‚ñπmap (x +:·∂ú_) y‚ñπ)
+:·∂ú-sucr x y‚ñπ = ap (_$ (cosu y‚ñπ)) (fix-path (+:·∂ú-body x))

-- TODO https://proofassistants.stackexchange.com/questions/1545/how-to-prove-that-addition-is-commutative-for-conatural-numbers-in-coq
