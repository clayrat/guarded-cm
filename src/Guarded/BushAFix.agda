{-# OPTIONS --guarded #-}
module Guarded.BushAFix where

open import Prelude
open import Data.List

open import LaterG
open import Guarded.Partial

private variable
  โ : Level    -- TODO generalize levels?
  A B X Y : ๐ฐ โ

-- binary tree automaton via fixpoint in the universe

BushF : ๐ฐ โ โ ๐ฐ โ โ โน (๐ฐ โ โ ๐ฐ โ) โ ๐ฐ โ โ ๐ฐ โ
BushF A B Fโน X = (A โ X) ร (B โ โธ (Fโน โ (Fโน โ next X)))

Bush : ๐ฐ โ โ ๐ฐ โ โ ๐ฐ โ โ ๐ฐ โ
Bush A B = fix (BushF A B)

opaque
  Bush-path : Bush A B X ๏ผ BushF A B (next (Bush A B)) X
  Bush-path {A} {B} {X} = happly (fix-path (BushF A B)) X

  Bushโ : Bush A B X โ BushF A B (next (Bush A B)) X
  Bushโ = transport Bush-path

  โBush : BushF A B (next (Bush A B)) X โ Bush A B X
  โBush = transport (Bush-path โปยน)

consแต : (A โ X) โ (B โ โน Bush A B (Bush A B X)) โ Bush A B X
consแต af bfโน = โBush (af , bfโน)

unconsแต : Bush A B X โ (A โ X) ร (B โ โน Bush A B (Bush A B X))
unconsแต = Bushโ

headแต : Bush A B X โ (A โ X)
headแต = fst โ unconsแต

tailโนแต : Bush A B X โ B โ โน Bush A B (Bush A B X)
tailโนแต = snd โ unconsแต

opaque
  unfolding Bushโ โBush

  uncons-eq : (b : Bush A B X) โ b ๏ผ consแต (headแต b) (tailโนแต b)
  uncons-eq {A} s = transportโป-transport Bush-path s โปยน

  head-cons : (af : A โ X) (bfโน : B โ โน Bush A B (Bush A B X)) โ headแต (consแต af bfโน) ๏ผ af
  head-cons {A} a asโน = transportโป-transport refl a

  tail-cons : {A B X : ๐ฐ โ} (af : A โ X) (bfโน : B โ โน Bush A B (Bush A B X)) โ tailโนแต (consแต af bfโน) ๏ผ bfโน
  tail-cons {A} {B} {X} a asโน =
    transportโป-transport
      (ฮป i โ B โ โน[ ฮฑ ] (pfix (BushF A B) (~ i) ฮฑ (pfix (BushF A B) (~ i) ฮฑ X)))
      asโน

-- constant bush

pureแต-body : โน ({X : ๐ฐ โ} โ X โ Bush A B X)
           โ    {X : ๐ฐ โ} โ X โ Bush A B X
pureแต-body pโน x = consแต (ฮป _ โ x) ฮป _ ฮฑ โ pโน ฮฑ (pโน ฮฑ x)

pureแต : X โ Bush A B X
pureแต = fix pureแต-body

-- map

mapแต-body : โน ({X Y : ๐ฐ โ} โ (X โ Y) โ Bush A B X โ Bush A B Y)
          โ    {X Y : ๐ฐ โ} โ (X โ Y) โ Bush A B X โ Bush A B Y
mapแต-body mโน f b =
  consแต (f โ headแต b) ฮป a ฮฑ โ mโน ฮฑ (mโน ฮฑ f) (tailโนแต b a ฮฑ)

mapแต : (X โ Y) โ Bush A B X โ Bush A B Y
mapแต f = fix mapแต-body f

mapแต-id : (X : ๐ฐ โ)
        โ (b : Bush A B X)
        โ mapแต id b ๏ผ b
mapแต-id {A} {B} =
  fix ฮป ihโน X b โ
    mapแต id b
      =โจ ap (ฮป q โ q id b) (fix-path mapแต-body) โฉ
    mapแต-body (next (ฮป {A} {B} โ mapแต)) id b
      =โจโฉ
    consแต (headแต b) (ฮป a ฮฑ โ mapแต (mapแต id) (tailโนแต b a ฮฑ))
      =โจ ap (consแต (headแต b)) (fun-ext ฮป a โ โน-ext ฮป ฮฑ โ
                                    ap (ฮป q โ mapแต q (tailโนแต b a ฮฑ)) (fun-ext (ihโน ฮฑ X))
                                  โ ihโน ฮฑ (Bush A B X) (tailโนแต b a ฮฑ)) โฉ
    consแต (headแต b) (tailโนแต b)
      =โจ uncons-eq b โปยน โฉ
    b
      โ

mapแต-comp : {A B : ๐ฐ โ} (X Y Z : ๐ฐ โ) (f : X โ Y) (g : Y โ Z)
          โ (b : Bush A B X)
          โ mapแต g (mapแต f b) ๏ผ mapแต (g โ f) b
mapแต-comp {A} {B} = fix ฮป ihโน X Y Z f g b โ
      mapแต g (mapแต f b)
        =โจ ap (ฮป q โ mapแต g (q f b)) (fix-path mapแต-body) โฉ
      mapแต g (mapแต-body (next ฮป {A} {B} โ mapแต) f b)
        =โจ ap (ฮป q โ q g (mapแต-body (next ฮป {A} {B} โ mapแต) f b)) (fix-path mapแต-body) โฉ
      mapแต-body (next ฮป {A} {B} โ mapแต) g (mapแต-body (next (ฮป {A} {B} โ mapแต)) f b)
        =โจโฉ
      consแต (g โ headแต (consแต (f โ headแต b) (ฮป a ฮฑ โ mapแต (mapแต f) (tailโนแต b a ฮฑ))))
            (ฮป a ฮฑ โ mapแต (mapแต g) (tailโนแต (consแต (f โ headแต b) (ฮป aโฒ ฮฑโฒ โ mapแต (mapแต f) (tailโนแต b aโฒ ฮฑโฒ))) a ฮฑ))
        =โจ ap (ฮป q โ consแต (g โ q)
                           (ฮป a ฮฑ โ mapแต (mapแต g) (tailโนแต (consแต (f โ headแต b)
                                                                 (ฮป aโฒ ฮฑโฒ โ mapแต (mapแต f) (tailโนแต b aโฒ ฮฑโฒ))) a ฮฑ)))
             (head-cons (f โ headแต b) (ฮป a ฮฑ โ mapแต (mapแต f) (tailโนแต b a ฮฑ))) โฉ
      consแต (g โ f โ headแต b)
            (ฮป a ฮฑ โ mapแต (mapแต g) (tailโนแต (consแต (f โ headแต b) (ฮป aโฒ ฮฑโฒ โ mapแต (mapแต f) (tailโนแต b aโฒ ฮฑโฒ))) a ฮฑ))
        =โจ ap (consแต (g โ f โ headแต b))
              (fun-ext ฮป a โ โน-ext ฮป ฮฑ โ
                  ap (mapแต (mapแต g)) (โน-ap (happly (tail-cons (f โ headแต b) ฮป aโฒ ฮฑโฒ โ mapแต (mapแต f) (tailโนแต b aโฒ ฮฑโฒ)) a) ฮฑ)
                โ ihโน ฮฑ (Bush A B X) (Bush A B Y) (Bush A B Z)
                        (mapแต f) (mapแต g)
                        (tailโนแต b a ฮฑ)
                โ ap (ฮป q โ mapแต q (tailโนแต b a ฮฑ)) (fun-ext (ihโน ฮฑ X Y Z f g))
                ) โฉ
      consแต (g โ f โ headแต b) (ฮป a ฮฑ โ mapแต (mapแต (g โ f)) (tailโนแต b a ฮฑ))
        =โจโฉ
      mapแต-body (next ฮป {A} {B} โ mapแต) (g โ f) b
        =โจ ap (ฮป q โ q (g โ f) b) (fix-path mapแต-body) โจ
      mapแต (g โ f) b
        โ


data BT (A B : ๐ฐ โ) : ๐ฐ โ where
  L  : A โ BT A B
  Sp : BT A B โ B โ BT A B โ BT A B

lamBT-body : โน ({X : ๐ฐ โ} โ (BT A B โ X) โ Bush A B X)
           โ    {X : ๐ฐ โ} โ (BT A B โ X) โ Bush A B X
lamBT-body lโน f = consแต (f โ L) ฮป a ฮฑ โ lโน ฮฑ ฮป t โ lโน ฮฑ ฮป u โ f (Sp t a u)

lamBT : (BT A B โ X) โ Bush A B X
lamBT = fix lamBT-body

appBT-body : โน ({X : ๐ฐ โ} โ Bush A B X โ BT A B โ Part X)
           โ    {X : ๐ฐ โ} โ Bush A B X โ BT A B โ Part X
appBT-body _  bh (L a)      = now (headแต bh a)
appBT-body aโน bh (Sp l a r) = later ฮป ฮฑ โ aโน ฮฑ (tailโนแต bh a ฮฑ) l >>=แต ฮป x โ aโน ฮฑ x r

appBT : Bush A B X โ BT A B โ Part X
appBT = fix appBT-body

-- example: evaluating a numerical expression

open import Data.Nat

data Op : ๐ฐ where
  Plus Mul : Op

eval : Bush โ Op โ
eval = fix ฮป eโน โ consแต id (go eโน)
  where
  go : โน Bush โ Op โ โ Op โ โน Bush โ Op (Bush โ Op โ)
  go eโน Plus = (ฮป l r โ mapแต (ฮป a โ mapแต (ฮป b โ a + b) r) l) โ eโน โ eโน
  go eโน Mul  = (ฮป l r โ mapแต (ฮป a โ mapแต (ฮป b โ a ยท b) r) l) โ eโน โ eโน
