{-# OPTIONS --guarded #-}
module Guarded.BushA where

open import Prelude

open import LaterG
open import Guarded.Partial

private variable
  โ : Level    -- TODO generalize levels?
  Aโฟ Aหก B : ๐ฐ โ

-- guarded (top-down?) binary tree automaton (with data in nodes and leaves)
-- based on http://www.cs.nott.ac.uk/~psztxa/publ/tlca01a.pdf

data Bush (Aโฟ Aหก B : ๐ฐ โ) : ๐ฐ โ where
  bsh : (Aหก โ B) โ (Aโฟ โ โน Bush Aโฟ Aหก (Bush Aโฟ Aหก B)) โ Bush Aโฟ Aหก B

mapแต-body : โน ({B C : ๐ฐ โ} โ (B โ C) โ Bush Aโฟ Aหก B โ Bush Aโฟ Aหก C)
          โ    {B C : ๐ฐ โ} โ (B โ C) โ Bush Aโฟ Aหก B โ Bush Aโฟ Aหก C
mapแต-body mโน f (bsh fb bโน) = bsh (f โ fb) ฮป a ฮฑ โ mโน ฮฑ (mโน ฮฑ f) (bโน a ฮฑ)

mapแต : {B C : ๐ฐ โ} โ (B โ C) โ Bush Aโฟ Aหก B โ Bush Aโฟ Aหก C
mapแต {B} {C} f = fix mapแต-body {B} {C} f

mapแต-id : (B : ๐ฐ โ)
        โ (b : Bush Aโฟ Aหก B)
        โ mapแต id b ๏ผ b
mapแต-id {Aโฟ} {Aหก} =
  fix ฮป ihโน B โ ฮป where
    b@(bsh a bโน) โ
        mapแต id b
          =โจ ap (ฮป q โ q id b) (fix-path mapแต-body) โฉ
        mapแต-body (next ฮป {A} {B} โ mapแต) id b
          =โจ ap (bsh a) (fun-ext ฮป a โ โน-ext ฮป ฮฑ โ
                             ap (ฮป q โ mapแต q (bโน a ฮฑ)) (fun-ext ฮป bโฒ โ ihโน ฮฑ B bโฒ)
                           โ ihโน ฮฑ (Bush Aโฟ Aหก B) (bโน a ฮฑ)) โฉ
        b
          โ

mapแต-comp : (B C D : ๐ฐ โ) (f : B โ C) (g : C โ D)
          โ (b : Bush Aโฟ Aหก B)
          โ mapแต g (mapแต f b) ๏ผ mapแต (g โ f) b
mapแต-comp {โ} {Aโฟ} {Aหก} =
  fix ฮป ihโน B C D f g โ ฮป where
    b@(bsh fx bโน) โ
        mapแต g (mapแต f b)
          =โจ ap (ฮป q โ mapแต g (q f b)) (fix-path mapแต-body) โฉ
        mapแต g (mapแต-body (next ฮป {B} {C} โ mapแต) f b)
          =โจ ap (ฮป q โ q g (mapแต-body (next ฮป {B} {C} โ mapแต) f b)) (fix-path mapแต-body) โฉ
        mapแต-body (next ฮป {B} {C} โ mapแต) g (mapแต-body (next (ฮป {B} {C} โ mapแต)) f b)
          =โจ ap (bsh (g โ f โ fx)) (fun-ext ฮป a โ โน-ext ฮป ฮฑ โ
                                      ihโน ฮฑ (Bush Aโฟ Aหก B) (Bush Aโฟ Aหก C) (Bush Aโฟ Aหก D)
                                            ((ฮป {B C : ๐ฐ โ} โ mapแต {โ} {B} {C}) f)
                                            ((ฮป {B C : ๐ฐ โ} โ mapแต {โ} {B} {C}) g)
                                            (bโน a ฮฑ)
                                    โ ap (ฮป q โ mapแต q (bโน a ฮฑ)) (fun-ext ฮป bโฒ โ ihโน ฮฑ B C D f g bโฒ)) โฉ
        mapแต-body (next ฮป {B} {C} โ mapแต) (g โ f) b
          =โจ ap (ฮป q โ q (g โ f) b) (fix-path mapแต-body) โจ
        mapแต (g โ f) b
          โ

-- constant bush

pureแต-body : โน ({B : ๐ฐ โ} โ B โ Bush Aโฟ Aหก B)
           โ    {B : ๐ฐ โ} โ B โ Bush Aโฟ Aหก B
pureแต-body pโน b = bsh (ฮป _ โ b) ฮป _ ฮฑ โ pโน ฮฑ (pโน ฮฑ b)

pureแต : โ {B : ๐ฐ โ} โ B โ Bush Aโฟ Aหก B
pureแต = fix pureแต-body

data BT (Aโฟ Aหก : ๐ฐ โ) : ๐ฐ โ where
  L  : Aหก โ BT Aโฟ Aหก
  Sp : BT Aโฟ Aหก โ Aโฟ โ BT Aโฟ Aหก โ BT Aโฟ Aหก

lamBT-body : โน ({B : ๐ฐ โ} โ (BT Aโฟ Aหก โ B) โ Bush Aโฟ Aหก B)
           โ    {B : ๐ฐ โ} โ (BT Aโฟ Aหก โ B) โ Bush Aโฟ Aหก B
lamBT-body lโน {B} f = bsh (f โ L) ฮป a ฮฑ โ lโน ฮฑ ฮป t โ lโน ฮฑ ฮป u โ f (Sp t a u)

lamBT : (BT Aโฟ Aหก โ B) โ Bush Aโฟ Aหก B
lamBT {B} = fix lamBT-body {B}

appBT-body : โน ({B : ๐ฐ โ} โ Bush Aโฟ Aหก B โ BT Aโฟ Aหก โ Part B)
           โ    {B : ๐ฐ โ} โ Bush Aโฟ Aหก B โ BT Aโฟ Aหก โ Part B
appBT-body aโน (bsh fb _ ) (L b)      = now (fb b)
appBT-body aโน (bsh _  fโน) (Sp l a r) = later ฮป ฮฑ โ aโน ฮฑ (fโน a ฮฑ) l >>=แต ฮป x โ aโน ฮฑ x r

appBT : Bush Aโฟ Aหก B โ BT Aโฟ Aหก โ Part B
appBT {B} = fix appBT-body {B}

-- example: evaluating a numerical expression

open import Data.Nat

data Op : ๐ฐ where
  Plus Mul : Op

eval : Bush Op โ โ
eval = fix ฮป eโน โ bsh id (go eโน)
  where
  go : โน Bush Op โ โ โ Op โ โน Bush Op โ (Bush Op โ โ)
  go eโน Plus = (ฮป l r โ mapแต (ฮป a โ mapแต (ฮป b โ a + b) r) l) โ eโน โ eโน
  go eโน Mul  = (ฮป l r โ mapแต (ฮป a โ mapแต (ฮป b โ a ยท b) r) l) โ eโน โ eโน
